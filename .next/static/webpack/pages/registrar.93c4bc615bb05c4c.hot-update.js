"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/registrar",{

/***/ "(pages-dir-browser)/./src/front-end/servicos/ServicoAutenticacao.ts":
/*!*******************************************************!*\
  !*** ./src/front-end/servicos/ServicoAutenticacao.ts ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServicoAutenticacao: () => (/* binding */ ServicoAutenticacao)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\r\n * Serviço de autenticação para o front-end\r\n * Responsável por comunicação com o MCP de autenticação\r\n */ class ServicoAutenticacao {\n    /**\r\n   * Realiza o login do usuário\r\n   * @param email Email do usuário\r\n   * @param senha Senha do usuário\r\n   * @returns Token JWT em caso de sucesso\r\n   * @throws Error em caso de falha\r\n   */ async login(email, senha) {\n        // Se estiver em modo de simulação, usar dados simulados\n        if (this.modoSimulacao) {\n            console.log('Usando modo de simulação para login');\n            // Simular um pequeno atraso para parecer uma requisição real\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            const usuario = this.usuariosSimulados[email];\n            if (!usuario) {\n                throw new Error('Usuário não encontrado');\n            }\n            if (usuario.senha !== senha) {\n                throw new Error('Senha incorreta');\n            }\n            // Gerar um token simulado\n            const token = \"simulado-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substring(2, 15));\n            // Armazenar o token no localStorage\n            localStorage.setItem('token', token);\n            localStorage.setItem('usuario', JSON.stringify({\n                id: \"user-\".concat(Math.random().toString(36).substring(2, 9)),\n                nome: usuario.nome,\n                email: usuario.email\n            }));\n            return token;\n        }\n        // Se não estiver em modo de simulação, tentar conectar ao servidor real\n        try {\n            const resposta = await fetch(\"\".concat(this.baseUrl, \"/login\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    email,\n                    senha\n                })\n            });\n            const dados = await resposta.json();\n            if (!resposta.ok) {\n                throw new Error(dados.message || 'Erro ao realizar login');\n            }\n            // Armazenar o token no localStorage\n            localStorage.setItem('token', dados.token);\n            return dados.token;\n        } catch (erro) {\n            console.error('Erro no login:', erro);\n            // Se o erro for de conexão, tentar usar o modo de simulação\n            if (erro instanceof TypeError && erro.message.includes('Failed to fetch')) {\n                console.log('Servidor indisponível, alternando para modo de simulação');\n                this.modoSimulacao = true;\n                return this.login(email, senha);\n            }\n            throw erro;\n        }\n    }\n    /**\r\n   * Registra um novo usuário\r\n   * @param nome Nome do usuário\r\n   * @param email Email do usuário\r\n   * @param senha Senha do usuário\r\n   * @returns Dados do usuário criado\r\n   * @throws Error em caso de falha\r\n   */ async registrar(nome, email, senha) {\n        // Se estiver em modo de simulação, usar dados simulados\n        if (this.modoSimulacao) {\n            console.log('Usando modo de simulação para registro');\n            // Simular um pequeno atraso para parecer uma requisição real\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            // Verificar se o email já está em uso\n            if (this.usuariosSimulados[email]) {\n                throw new Error('Este email já está em uso');\n            }\n            // Adicionar o novo usuário à lista de usuários simulados\n            this.usuariosSimulados[email] = {\n                nome,\n                email,\n                senha\n            };\n            // Retornar os dados do usuário criado (sem a senha)\n            return {\n                id: \"user-\".concat(Math.random().toString(36).substring(2, 9)),\n                nome,\n                email,\n                message: 'Usuário registrado com sucesso!'\n            };\n        }\n        // Se não estiver em modo de simulação, tentar conectar ao servidor real\n        try {\n            const resposta = await fetch(\"\".concat(this.baseUrl, \"/registrar\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    nome,\n                    email,\n                    senha\n                })\n            });\n            const dados = await resposta.json();\n            if (!resposta.ok) {\n                throw new Error(dados.message || 'Erro ao registrar usuário');\n            }\n            return dados;\n        } catch (erro) {\n            console.error('Erro no registro:', erro);\n            // Se o erro for de conexão, tentar usar o modo de simulação\n            if (erro instanceof TypeError && erro.message.includes('Failed to fetch')) {\n                console.log('Servidor indisponível, alternando para modo de simulação');\n                this.modoSimulacao = true;\n                return this.registrar(nome, email, senha);\n            }\n            throw erro;\n        }\n    }\n    /**\r\n   * Solicita recuperação de senha\r\n   * @param email Email do usuário\r\n   * @returns Mensagem de sucesso\r\n   * @throws Error em caso de falha\r\n   */ async recuperarSenha(email) {\n        // Se estiver em modo de simulação, usar dados simulados\n        if (this.modoSimulacao) {\n            console.log('Usando modo de simulação para recuperação de senha');\n            // Simular um pequeno atraso para parecer uma requisição real\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            // Verificar se o email existe\n            if (!this.usuariosSimulados[email]) {\n                // Por segurança, não informamos se o email existe ou não\n                return 'Se o e-mail estiver cadastrado, enviaremos instruções para recuperação de senha.';\n            }\n            // Simular um token de recuperação\n            const token = \"recuperacao-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substring(2, 15));\n            console.log(\"Token de recupera\\xe7\\xe3o simulado para \".concat(email, \": \").concat(token));\n            return 'Se o e-mail estiver cadastrado, enviaremos instruções para recuperação de senha.';\n        }\n        // Se não estiver em modo de simulação, tentar conectar ao servidor real\n        try {\n            const resposta = await fetch(\"\".concat(this.baseUrl, \"/recuperar-senha\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    email\n                })\n            });\n            const dados = await resposta.json();\n            if (!resposta.ok) {\n                throw new Error(dados.message || 'Erro ao solicitar recuperação de senha');\n            }\n            return dados.message;\n        } catch (erro) {\n            console.error('Erro na recuperação de senha:', erro);\n            // Se o erro for de conexão, tentar usar o modo de simulação\n            if (erro instanceof TypeError && erro.message.includes('Failed to fetch')) {\n                console.log('Servidor indisponível, alternando para modo de simulação');\n                this.modoSimulacao = true;\n                return this.recuperarSenha(email);\n            }\n            throw erro;\n        }\n    }\n    /**\r\n   * Redefine a senha do usuário\r\n   * @param senha Nova senha\r\n   * @param token Token de redefinição de senha\r\n   * @returns Mensagem de sucesso\r\n   * @throws Error em caso de falha\r\n   */ async redefinirSenha(senha, token) {\n        // Se estiver em modo de simulação, usar dados simulados\n        if (this.modoSimulacao) {\n            console.log('Usando modo de simulação para redefinição de senha');\n            // Simular um pequeno atraso para parecer uma requisição real\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            // Verificar se o token é válido (em um caso real, verificaríamos em um banco de dados)\n            if (!token.startsWith('recuperacao-')) {\n                throw new Error('Token inválido ou expirado');\n            }\n            // Em um caso real, atualizaríamos a senha do usuário no banco de dados\n            console.log(\"Senha redefinida com sucesso usando o token: \".concat(token));\n            return 'Senha redefinida com sucesso!';\n        }\n        // Se não estiver em modo de simulação, tentar conectar ao servidor real\n        try {\n            const resposta = await fetch(\"\".concat(this.baseUrl, \"/redefinir-senha\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    senha,\n                    token\n                })\n            });\n            const dados = await resposta.json();\n            if (!resposta.ok) {\n                throw new Error(dados.message || 'Erro ao redefinir senha');\n            }\n            return dados.message;\n        } catch (erro) {\n            console.error('Erro na redefinição de senha:', erro);\n            // Se o erro for de conexão, tentar usar o modo de simulação\n            if (erro instanceof TypeError && erro.message.includes('Failed to fetch')) {\n                console.log('Servidor indisponível, alternando para modo de simulação');\n                this.modoSimulacao = true;\n                return this.redefinirSenha(senha, token);\n            }\n            throw erro;\n        }\n    }\n    /**\r\n   * Verifica se o usuário está autenticado\r\n   * @returns true se o usuário estiver autenticado, false caso contrário\r\n   */ estaAutenticado() {\n        if (false) {}\n        const token = localStorage.getItem('token');\n        return !!token;\n    }\n    /**\r\n   * Realiza o logout do usuário\r\n   */ logout() {\n        if (false) {}\n        localStorage.removeItem('token');\n        localStorage.removeItem('usuario');\n    }\n    /**\r\n   * Obtém o token JWT armazenado\r\n   * @returns Token JWT ou null se não estiver autenticado\r\n   */ obterToken() {\n        if (false) {}\n        return localStorage.getItem('token');\n    }\n    /**\r\n   * Obtém os dados do usuário autenticado\r\n   * @returns Dados do usuário ou null se não estiver autenticado\r\n   */ obterUsuario() {\n        if (false) {}\n        const usuarioJson = localStorage.getItem('usuario');\n        if (!usuarioJson) {\n            return null;\n        }\n        try {\n            return JSON.parse(usuarioJson);\n        } catch (erro) {\n            console.error('Erro ao obter dados do usuário:', erro);\n            return null;\n        }\n    }\n    constructor(){\n        // URL base do MCP de autenticação\n        this.baseUrl = process.env.NEXT_PUBLIC_AUTH_API_URL || 'http://localhost:3001';\n        // Verificar se devemos usar o modo de simulação (quando o servidor não está disponível)\n        this.modoSimulacao = process.env.NEXT_PUBLIC_MODO_SIMULACAO === 'true' || true;\n        // Usuários simulados para testes\n        this.usuariosSimulados = {\n            'admin@exemplo.com': {\n                nome: 'Administrador',\n                email: 'admin@exemplo.com',\n                senha: 'senha123'\n            },\n            'fornecedor@exemplo.com': {\n                nome: 'Fornecedor Teste',\n                email: 'fornecedor@exemplo.com',\n                senha: 'senha123'\n            },\n            'representante@exemplo.com': {\n                nome: 'Representante Teste',\n                email: 'representante@exemplo.com',\n                senha: 'senha123'\n            }\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/front-end/servicos/ServicoAutenticacao.ts\n"));

/***/ })

});